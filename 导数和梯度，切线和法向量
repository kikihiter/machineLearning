https://blog.csdn.net/sunmenggmail/article/details/7443729

博客
学院
下载
图文课
TinyMind
论坛
APP
问答
商城
VIP会员
活动
招聘
ITeye
GitChat

搜博主文章
写博客
发Chat
传资源
登录注册
转
导数和梯度，切线和法向量
2012年04月10日 09:03:18 sunmenggmail 阅读数：21342 标签： 图形 web
转自：http://www.cnblogs.com/jerrylead/archive/2011/03/09/1978280.html

作者讲得很清楚



记得在高中做数学题时，经常要求曲线的切线。见到形如clip_image002之类的函数，不管三七二十一直接求导得到clip_image004，这就是切线的斜率，然后clip_image006就得到了clip_image008处的切线。

上大学又学习了曲面切线和法向量的求法，求偏导是法向量，然后套公式求出切线。

一个经典例子如下：

clip_image001

（来自web上某个《几何应用》ppt）

其中的向量n是F(x,y,z)的偏导数。

然而，这两者求法看似无关啊，clip_image003中求得的clip_image005是切线，然而下面的求偏导后却是法向量，为啥都是求导，差别这么大呢？切平面的方程为啥又是与法向量有关呢？

当然这些问题的问答都可以通过严格的数学推导完成。这里想从更加直白的角度来说明道理。

首先，法向量（梯度）是F(X)（其中X={x0,x1,x2,…xn}是n维向量）对各个分量求偏导后的结果，代表了F(X)在各个方向的变化率，整个法向量就是F(X)在各个方向上变化率叠加出来的向量。如对于一维的F(x)=clip_image007，在x上导数是2x，意味着在x方向上是以2x的速度变化，比如当x=2时，F(x)变化率为4大于当x=1时（变化率为2）的变化率，法向量的方向只能是x方向，因为F(X)是一维。这里的F(X)称为隐函数，如我们平时使用的clip_image003[1]使用隐函数就可以表示成F(x,y)=f(x)-y，这样其实F(x,y)是二维的。至于为什么导数就是变化率，可以通过导数的定义就可以知道了（微小的dx变化引起多大的dy变化）。

那么我们明白了，隐函数F(X)的法向量就是F(X)对各个分量的偏导数的向量。那么为何clip_image003[2]中求得的clip_image005[1]是切线，而不是法向量？其实我们不能搞混了隐函数F(X)和clip_image003[3]。隐函数是一个函数，它的值根据X的取值不同而不同。而clip_image003[4]只是x和y之间满足的约束关系，如建立x-y坐标，两者的约束关系可以通过图形（直线、曲线等）来表示。比如我们可以用clip_image009来表示一条抛物线，而且能够在x-y坐标系下画出来。而换用隐函数表示就是F(x,y)=clip_image011，只有当F(x,y)等于一个给定值（比如0时），它才是一条抛物线，否则它只是一个函数，如果用z来代替F(x,y)，那么F(x,y)其实是一个曲面，维度上升了1。我们对F(x,y)求偏导后的结果其实就是F(x,y)的值z的变化率。

clip_image002[4]

说明F(x,y)的值究竟将在(x,y)的小范围能变化多少，这个变化率决定于x方向上的微小变换dx和y方向上微小变换dy的线性组合，而他们的系数就是偏导数。将dx和dy换成单位向量i和j就是法向量了。那么梯度也就反映了F(X)在某一点的变化率和变换方向。

说的有点绕口，简而言之，对于一个隐函数F(X)，我们想知道在给定X附近F(X)的变化方向和大小。怎么去刻画？由于X的各个方向（x0，x1，x2…xn）上变化速率和方向都不同（比如在x0上以平方级别变化，在x1上以线性方式变化，这个要根据具体的表达式了），而我们想知道他们叠加在一块是怎么变化的。我们使用全微分公式（比如上面的clip_image002[6]，可以知道他们之间的叠加系数就是偏导数，叠加结果就是变化率，而方向就是x0，x1，x2…相应的变化方向i，j，k…等线性组合得到的方向。

回到为什么“clip_image003[5]中求得的clip_image005[2]是切线”的问题，其实这是最终结论了，是推导出来的。第一步我们将clip_image003[6]写成隐函数（这里的x，y都是实数了，上面的X是向量），clip_image017。

然后求F对x的偏导得clip_image019=clip_image005[3]

求F对y的偏导得-1。

即梯度是clip_image021

由于切线和法向量是垂直的，因此切线和法向量内积为0。

设切线方向向量为(m,n)，那么clip_image023，即clip_image002[8]。

可见，切线斜率是clip_image027。

回到上面蓝色图片中的曲面求切平面问题，求出某点的法向量后，在该点的切平面要满足两个条件，一是要过切点，而是要反映出该点的变化方向（这里不是该点F(X)值的变化方向，而是该点自己的变化方向）。然而该点的变化最终要反映出该点F(X)值的变化，也就是切平面的变化要反映出法向量的变化，而偏导数正是反映出了F(X)值的变化。因此切平面的偏导数与F(X)的偏导数是一样的。我们从蓝色图片中看到，切平面正是利用了F(X)的偏导数。

有上面的全微分公式，我们可以更好地理解极值，为什么常说函数取得极值的时候导数为0呢。假设一维情况，clip_image029吧，要求极小值，两边微分后得clip_image031，当x=0时，导数2x为0，取得极值。否则，如果x为正数，那么dx只需向左调整(dx<0)，就能使F(x)值变小，如果x为负数，那么dx只需向右调整（dx>0），就能使F(x)变小。因此最后调整结果是x=0。对于二维情况，clip_image002[4]

clip_image033的值在计算后会有正负值，但我们应该注意到dx可正可负，dy也可正可负，只要clip_image033[1]有一个不为0，那么通过调整dx，dy的正负号（也就是确定怎么移动x和y）就可以使clip_image015[1]的值变大变小。只有在偏导数都是0的情况下，无论如何调整dx和dy，clip_image002[6]都是0，取得极值。

以上只是一些个人浅显理解，目的是建立感性认识，会存在一些纰漏。





*下面是个人更为通俗的理解：

如果函数是一维的变量，则梯度就是切线的方向

如果是大于一维的，梯度就是在这个点的法向量，并指向数值更高的等值线，这就是为什么求最小值的时候要用负梯度

想对作者说点什么？ 我来说一句
 qq_41917355
qq_41917355： 老师真的给力说的真清楚!(03-28 20:25#5楼)
qq_34498991
qq_34498991： 写得非常好，谢谢老师了，解惑了(03-31 19:42#4楼)
Isabella925813290
Isabella925813290： 也好棒！(10-04 18:59#3楼)
u014694343
u014694343： 感谢，我在偏导和法线之间纠结了几天，现在貌似懂了(04-13 19:56#2楼)
yanleng
yanleng： 写的很好，正好我在这方面也和作者有同样的疑惑，作者的解释可帮了我大忙了(08-11 15:58#1楼)
查看 5 条热评
切向量，法向量，梯度
u010594850
 8098

通过爬山理解梯度与法向量的关系

切向量和梯度的关系
cztq15
 1495

http://blog.csdn.net/silence1214/article/details/8875809

C++中如何正确的开辟一个动态的二维数组
yc2zgh1314
 1.3万

如何定义一个二级指针，看似每个有点C语言基础的人觉得自己都可以很容易完成，但要正确的完成并且说的明白其中道理不见得就那么多。正确的理解数组指针和指针数组是关键。...

为什么梯度的方向与等高线切线方向垂直？
lilong117194
 1915

等高线的示意图：三维曲面上的梯度更新过程中，很多地方出现梯度的下降方向是如下这样走的：从图上能够看出，梯度下降的方向与等高线的切线方向垂直。那么为什么会垂直呢？其实是一个高数问题解释假设我们的损失函数...

多元函数的切向量和法向量
ranghanqiao5058
 4981

首先请阅读  点击打开链接 有一个很有启发性的说法：考虑描述曲面的隐函数F(x,y,z)=0 其全微分dF=F'xdx+F'ydy+F'zdz=0   即（F'x，F'y，F'z）（dx,d...

如何找到两个圆的公切线？
gt11799
 2707

大家都提供了道，我来提供术。我最近在自学python，题主如果想学python，可以私信微信号给我，我们一起努力啊。 我采用的是 @vczh的算法，期间程序有问题，我手算了一条内公切线的斜率，用的是 ...

斜率、梯度（完全不一样的理解）
a6333230
 309

为什么要写这两个，因为确实是网上教材很多，讲解也很多，在这里说一下自己的见解，仅供参考，有异议可以在下评论，谢谢。 1.眼见为假 我们很多时候所看到的实质其实是有误的，我们会看到比本质高一维或...

梯度 方向导数 梯度下降 斜率
withwings
 395

。。。

梯度与导数的关系
whu_student
 4022

梯度可谓是多元函数中一个基本的名词。它的物理意义我们都很清楚或者教材也都会介绍：方向指向数值增长最快的方向，大小为变化率。通过这个性质也说明梯度是有方向和大小的矢量。通过梯度的定义我们发现，梯度的求解...

方向导数与梯度
shinetzh
 3274

方向导数与梯度   一、方向导数 现在我们来讨论函数在一点沿某一方向的变化率问题. 定义 设函数在点的某一邻域内有定义.自点引射线.设轴正向到射线的转角为（逆时针方向：0；顺时针方向：...

相关热词 导数的导数 ∫导数 导数 一阶导数二阶导数 上导数和下导数
关于梯度上升和梯度下降的理解
u010310527
 6324

在求极值的问题中，有梯度上升和梯度下降两个最优化方法。梯度上升用于求最大值，梯度下降用于求最小值。...

梯度向量与梯度下降法
Sagittarius_Warrior
 1290

最近非常热门的“深度学习”领域，用到了一种名为“梯度下降法”的算法。梯度下降法是机器学习中常用的一种方法，它主要用于快速找到“最小误差”（the minimum error）。要掌握“梯度下降法”，就...

什么是梯度
caimouse
 2474

在学习机器学习过程中，会遇到一个名词，就是梯度。因为很多情况之下，基本上没有完美的解，只能逐渐逼近它，往往要使用迭代法来求解，并且迭代法也是计算机的专长，可以说这世界上只有它是最会玩迭代算法了。在使用...

 
sunmenggmail

关注
原创
302
粉丝
782
喜欢
42
评论
175
等级： 访问： 234万+ 积分： 2万+ 排名： 412
勋章：
最新文章
GCC选项_-Wl,-soname
c++ 分析core文件 在os x
mac os 安装 thrift
mac os 安装 pkg-config
编译opencv文件
个人分类
c++178篇
算法378篇
linux101篇
python38篇
java136篇
高性能建站16篇
分布式24篇
机器学习40篇
推荐系统11篇
English1篇
数据结构5篇
操作系统5篇
office6篇
网络编程16篇
正则表达式1篇
软件工程22篇
点点滴滴7篇
前瞻10篇
工作相关2篇
基础知识37篇
计算广告2篇
go1篇
android8篇
node1篇
gpu11篇
scala1篇
opencv1篇
展开

归档
2016年6月 1篇
2016年1月 3篇
2015年12月 2篇
2015年11月 1篇
2015年8月 2篇
2015年7月 4篇
2015年6月 3篇
2015年5月 1篇
2015年4月 3篇
2015年3月 2篇
2015年2月 4篇
2015年1月 15篇
2014年12月 1篇
2014年11月 3篇
2014年10月 5篇
2014年9月 11篇
2014年8月 7篇
2014年7月 6篇
2014年6月 12篇
2014年5月 5篇
2014年3月 1篇
2014年2月 8篇
2014年1月 15篇
2013年12月 13篇
2013年11月 31篇
2013年10月 27篇
2013年9月 30篇
2013年8月 43篇
2013年7月 6篇
2013年6月 13篇
2013年5月 9篇
2013年4月 14篇
2013年3月 11篇
2013年2月 18篇
2013年1月 41篇
2012年12月 41篇
2012年11月 94篇
2012年10月 100篇
2012年9月 81篇
2012年8月 52篇
2012年7月 47篇
2012年6月 32篇
2012年5月 77篇
2012年4月 54篇
2012年3月 32篇
2012年2月 10篇
展开

热门文章
轻松学习RSA加密算法原理
阅读量：109095

Redis和Memcache对比及选择
阅读量：65357

关于凸优化的一些简单概念
阅读量：64840

自旋锁和互斥锁区别
阅读量：62159

几个简单数学分布
阅读量：43776

最新评论
关于凸优化的一些简单概念
appleyuchi：十分清晰！

旋转有序数组的二分查找
duyuan6949：整个方法挺好。 但是有个小问题当要从数组{1,1,1,0,1}中查找0时， 代码会有bug。

排序二叉树的插入和删除
weixin_40989362：[reply]gsfdjgji[/reply]引用这个根节点，指向同一块空间，如果不加引用就需要用...

关于凸优化的一些简单概念
SIGAI_CSDN：你好，你这篇文章关于凸优化的问题讲的很清晰，大有收获，我这边也有一篇关于原创的关于凸优化的介绍，h...

nio高并发编程
Rambo2017：您好，大神，请问下，我用的代码在本地模拟了客户端和服务端，为什么在本地开启第三个客户端连接，服务端...

联系我们
客服
请扫描二维码联系客服
webmaster@csdn.net

400-660-0108

QQ客服 客服论坛

关于招聘广告服务 网站地图

©2018 CSDN版权所有 京ICP证09002463号

百度提供搜索支持

app
经营性网站备案信息

网络110报警服务

中国互联网举报中心

北京互联网违法和不良信息举报中心

CSDN APP
登录
注册


4

5



 

